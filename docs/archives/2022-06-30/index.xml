<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2022-06-30 on 20yuteo.log</title>
    <link>https://20yuteo.github.io/hugoapp/archives/2022-06-30/</link>
    <description>Recent content in 2022-06-30 on 20yuteo.log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <managingEditor>20yuteo@gmail.com (20yuteo)</managingEditor>
    <webMaster>20yuteo@gmail.com (20yuteo)</webMaster>
    <lastBuildDate>Thu, 30 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://20yuteo.github.io/hugoapp/archives/2022-06-30/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DNSとは？？？(備忘録)</title>
      <link>https://20yuteo.github.io/hugoapp/what_is_dns/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      <author>20yuteo@gmail.com (20yuteo)</author>
      <guid>https://20yuteo.github.io/hugoapp/what_is_dns/</guid>
      <description>1. サーバーサイドがわからない 普段インフラ周りを触ることがないので個人開発してるとかなり辛くなる。。。 調べてその場で理解しても普段アウトプットの場所がないため全然定着しなくて困ってるんで 備忘録的に随時更新していこうと思う。
2. DNS とは？  D 「Domain」N「Name」S「Service」 インターネット上でドメインを管理するためのシステム ドメインはここのこと↓ 「https://example.com/ ネットからアクセスできるサーバーはIPアドレスを持っている 毎回IPアドレスを打ってアクセスするのは間違える可能性も高く仮にサーバーコンピューターを入れ替えた際にもユーザーが今までアクセスしていたIPが使えなくなったり不便なことが多い もっと簡単にアクセスできないか？と考えられた仕組みが「DNS」です 「人が覚えやすい名前」と「IPアドレス」を関連付けて簡単にアクセスできるようにしたもの 「人が覚えやすい名前」が「ドメイン名」のことである 厳密には「ホスト名」＋「ドメイン名」で「FQDN」という呼び方になる ネットワーク構成が変わってIPアドレスが変わってもドメインに紐づけられているIPアドレスを書き換えるだけでおk 各ドメイン配下の情報はそれぞれのドメインで責任を持って管理してもらう ユーザーがアクセスする場合、ドメイン名をその管轄ドメインに問い合わせることでIPアドレスを教えてもらう方法がかんがえられた 上記を行うのがDNSサーバー DNSサーバーは各ドメインに存在し、自分のドメイン配下にあるサーバーのIPアドレスを管理する これをゾーン情報という DNSの問い合わせを受けるとそのIPアドレスを教える この方法によりユーザーは全サーバーの情報を持っておかずに済むようになったがそれでも、各ドメインの問い合わせ先DNSサーバーの所在は知っている必要がある サーバーコンピューターほどじゃないにせよドメイン自体も世界中に数えきれないほどあるのでこれも膨大な情報である これを解決するためにDNSは階層構造となっており、一番上に「ルート」と呼ばれるサーバーがあり、その下にはドメインを逆にした順番で管理DNSが存在しており
それぞれの配下のサーバー情報を管理している 該当のDNSサーバーの所在がわからなくてもルートから順番に問い合わせることでたどり着くことができる ユーザーはルートサーバーさえ知っていれば世界中のどんなドメイン配下のサーバーでもIPアドレスがわかるようになった  </description>
    </item>
    
    <item>
      <title>ブラウザバックを禁止したくなったら</title>
      <link>https://20yuteo.github.io/hugoapp/dont_browser_back/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      <author>20yuteo@gmail.com (20yuteo)</author>
      <guid>https://20yuteo.github.io/hugoapp/dont_browser_back/</guid>
      <description>1. これまでの経緯 お客様「ちょっとブラウザバック禁止させてくんね？」
俺 (ブラウザバック禁止とかチョロそうなタスク来たわ)
俺「いいっすよ！チャチャっとやっちゃいますよ！」
この一言で僕は地獄を見ることとなりました。
これからお話することはブラウザバック禁止対応を甘くみた私の備忘録となります。
心して聞いてください。。。
2. とりあえず結論 完全なブラウザバックの禁止はできません！あきらめましょう！
そっかぁできないのか、じゃあしょうがない！&amp;hellip;
とはならない人もいるかと思いますのでなぜ完全には防げないのかを解説します！
3. chromeではブラウザバック制御ができない 色々ブラウザバック禁止等の情報を調べていると
javascriptのpopstateを利用して制御する方法が結構出てくると思います。
俺「めっちゃ情報あるじゃん。半日くらいで終わりそうやな。」
高を括っていた私ですがあることに気付きます。
俺「あれ。chromeで発火しねぇんだが&amp;hellip;」
 Google working on blocking Back button hijacking in Chrome
https://www.zdnet.com/article/google-working-on-blocking-back-button-hijacking-in-chrome/
 2022/6/30時点での情報ですがブラウザの履歴等の操作を行うhistory APIが
chrome側でブロックされているようです。仕様までしっかりと確認は取れていませんが
EdgeでもhistoryAPIが動作しないことが確認できました。
4. 対応方法 chromeの仕様ですがページを表示しているユーザーが画面上をクリック等の
アクションをとるとHistoryAPIが発火するようになるようです。
ユーザビリティ等の観点から考えるとイマイチかもしれないですが必ず一度は
画面を押下するような作りにする。遷移先でブラウザバックを検知
(onshowpageで検知できます)することで代替することもできるかも&amp;hellip;。
(ただこの方法はなかなか辛いので全くおすすめしません。)
一番はブラウザバックさせてもいいような設計にすることが一番ですので
きちんとお客様に説明して出来るだけ断るように倒すべきかと思います。</description>
    </item>
    
  </channel>
</rss>
